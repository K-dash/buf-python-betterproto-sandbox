# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: pet/v1/pet.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from typing import (
    TYPE_CHECKING,
    Dict,
    Optional,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase

from ...google import type as __google_type__


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


class PetType(betterproto.Enum):
    """PetType represents the different types of pets in the pet store."""

    UNSPECIFIED = 0
    CAT = 1
    DOG = 2
    SNAKE = 3
    HAMSTER = 4


@dataclass(eq=False, repr=False)
class Pet(betterproto.Message):
    """Pet represents a pet in the pet store."""

    pet_type: "PetType" = betterproto.enum_field(1)
    pet_id: str = betterproto.string_field(2)
    name: str = betterproto.string_field(3)
    created_at: "__google_type__.DateTime" = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class GetPetRequest(betterproto.Message):
    pet_id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class GetPetResponse(betterproto.Message):
    pet: "Pet" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class PutPetRequest(betterproto.Message):
    pet_type: "PetType" = betterproto.enum_field(1)
    name: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class PutPetResponse(betterproto.Message):
    pet: "Pet" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class DeletePetRequest(betterproto.Message):
    pet_id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class DeletePetResponse(betterproto.Message):
    pass


class PetStoreServiceStub(betterproto.ServiceStub):
    async def get_pet(
        self,
        get_pet_request: "GetPetRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetPetResponse":
        return await self._unary_unary(
            "/pet.v1.PetStoreService/GetPet",
            get_pet_request,
            GetPetResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def put_pet(
        self,
        put_pet_request: "PutPetRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "PutPetResponse":
        return await self._unary_unary(
            "/pet.v1.PetStoreService/PutPet",
            put_pet_request,
            PutPetResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def delete_pet(
        self,
        delete_pet_request: "DeletePetRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "DeletePetResponse":
        return await self._unary_unary(
            "/pet.v1.PetStoreService/DeletePet",
            delete_pet_request,
            DeletePetResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class PetStoreServiceBase(ServiceBase):

    async def get_pet(self, get_pet_request: "GetPetRequest") -> "GetPetResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def put_pet(self, put_pet_request: "PutPetRequest") -> "PutPetResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def delete_pet(
        self, delete_pet_request: "DeletePetRequest"
    ) -> "DeletePetResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_get_pet(
        self, stream: "grpclib.server.Stream[GetPetRequest, GetPetResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_pet(request)
        await stream.send_message(response)

    async def __rpc_put_pet(
        self, stream: "grpclib.server.Stream[PutPetRequest, PutPetResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.put_pet(request)
        await stream.send_message(response)

    async def __rpc_delete_pet(
        self, stream: "grpclib.server.Stream[DeletePetRequest, DeletePetResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.delete_pet(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/pet.v1.PetStoreService/GetPet": grpclib.const.Handler(
                self.__rpc_get_pet,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetPetRequest,
                GetPetResponse,
            ),
            "/pet.v1.PetStoreService/PutPet": grpclib.const.Handler(
                self.__rpc_put_pet,
                grpclib.const.Cardinality.UNARY_UNARY,
                PutPetRequest,
                PutPetResponse,
            ),
            "/pet.v1.PetStoreService/DeletePet": grpclib.const.Handler(
                self.__rpc_delete_pet,
                grpclib.const.Cardinality.UNARY_UNARY,
                DeletePetRequest,
                DeletePetResponse,
            ),
        }
